// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int  @id @default(autoincrement())
  userId             Int  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user               User    @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique@map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id            Int      @id @default(autoincrement())
  email         String      @unique
  emailVerified DateTime?
  image         String?
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  role          Role        @default(USER)
  categories    Category[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id            Int         @id @default(autoincrement())
  identifier    String
  token         String      @unique
  expires       DateTime

  @@unique([identifier, token])
}


model Category {
  id            Int         @id @default(autoincrement())
  title         String
  color         String      @default("#000")
  description   String
  url           String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  author        User?        @relation(fields: [authorId], references: [id])
  authorId      Int?
  videos        Video[]
}

model Video {
  id            Int         @id @default(autoincrement())
  title         String
  url           String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    Int
}

enum Role {
  USER
  ADMIN
}